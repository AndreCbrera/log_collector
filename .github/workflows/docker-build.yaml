name: Docker Build & Semantic Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*' # Incluimos el trigger de tags para la segunda ejecución

env:
  REGISTRY: ghcr.io
  # Nombre de la imagen en el registro de GitHub (GHCR)
  IMAGE_NAME: log-collector-service

jobs:
  # Job 1: Determina la versión y crea el tag de Git
  versioning:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Necesario para crear y subir tags
      packages: write
    outputs:
      new_release_tag: ${{ steps.semantic.outputs.new_release_tag }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Create Semantic Release Config (.releaserc.yml)
        run: |
          cat << EOF > .releaserc.yml
          plugins:
            - "@semantic-release/commit-analyzer"
            - "@semantic-release/release-notes-generator"
            - "@semantic-release/changelog"
            - "@semantic-release/git"
          EOF
      
      - name: Automatic Semantic Versioning (Crea y sube el tag)
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        # Ya no usamos 'with: plugins', la acción leerá el archivo .releaserc.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # Job 2: Construye y sube la imagen Docker
  build-and-push:
    runs-on: ubuntu-latest
    
    # CLAVE: Se ejecuta solo si el evento que disparó el flujo es un PUSH de un tag 'v*'.
    # ✅ CORRECCIÓN 2: Eliminamos la dependencia de 'needs'
    if: startsWith(github.ref, 'refs/tags/v')
    # Se elimina 'needs: versioning' para que el job no se salte.
    
    permissions:
      contents: read
      packages: write # Permiso para escribir en GitHub Container Registry

    steps:
      # En el evento de tag, el checkout obtendrá automáticamente el código del commit etiquetado.
      - name: Checkout repository (con el tag)
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Genera tags Docker usando el tag de Git recién creado
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Usa el tag de Git (ej: v1.1.0)
            type=ref,event=tag 
            # Añade una etiqueta basada en el SHA como fallback
            type=sha,format=long 

      # Inicia sesión en GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }} 

      # Compila la imagen y la sube al registro (Build and Push)
      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile